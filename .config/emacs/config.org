#+TITLE: My emacs config
#+AUTHOR: Headset
#+STARTUP: showeverything
#+OPTIONS: toc:2


* TOC :toc:
- [[#interface-customization][Interface Customization]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#dashboard][Dashboard]]
- [[#dired][Dired]]
- [[#company][Company]]
- [[#font-setup][Font Setup]]
  - [[#zooming-in--out][Zooming In & Out]]
- [[#package-initialization][Package Initialization]]
  - [[#use-package-initialization][Use-Package Initialization]]
- [[#evil-mode-setup][Evil Mode Setup]]
- [[#keybindings-with-general][Keybindings with General]]
- [[#transparency][Transparency]]
- [[#reload-emacs][Reload emacs]]
- [[#catppuccin-theme][Catppuccin Theme]]
- [[#programming-langs][Programming langs]]
- [[#org-mode-enhancements][Org Mode Enhancements]]
- [[#ivy][Ivy]]
- [[#which-key-setup][Which-Key Setup]]
- [[#sudo-edit][Sudo Edit]]
- [[#prevent-save-files][Prevent save files]]
- [[#modeline][Modeline]]

* Interface Customization
Disabling unnecessary GUI elements and enabling line numbers:

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+END_SRC

* ALL THE ICONS
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src


* Dired
#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)

;;(add-hook 'peep-dired-hook 'evil-normalize-keymaps)

#+end_src

* Company
#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))


#+end_src
* Font Setup
To set the default font to JetBrains Mono Nerd Font:

#+BEGIN_SRC emacs-lisp
;; jetbrains mono nerd font
(set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 120)
#+END_SRC


** Zooming In & Out
#+begin_src emacs-lisp 
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* Package Initialization
Initializing package sources:

#+BEGIN_SRC emacs-lisp
;; init packages sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+END_SRC

** Use-Package Initialization
Set up use-package for package management:

#+BEGIN_SRC emacs-lisp
;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

* Evil Mode Setup
To enable Evil mode for Vim-like keybindings:

#+BEGIN_SRC emacs-lisp
(use-package evil)
(require 'evil)
(evil-mode 1)
#+END_SRC

* Keybindings with General
Setting up custom keybindings using =general= package:

#+BEGIN_SRC emacs-lisp
        (use-package general
          :config
          (general-evil-setup)

          ;; set up 'SPC' as the global leader key
          (general-create-definer ht/leader-keys
            :states '(normal insert visual emacs)
            :keymaps 'override
            :prefix "SPC" ;; set leader
            :global-prefix "M-SPC") ;; access leader in insert mode

          (ht/leader-keys
            "b" '(:ignore t :wk "buffer")
            "bb" '(switch-to-buffer :wk "Switch buffer")
            "bk" '(kill-this-buffer :wk "Kill this buffer")
            "bn" '(next-buffer :wk "Next buffer")
            "bp" '(previous-buffer :wk "Previous buffer")
            "br" '(revert-buffer :wk "Reload buffer"))
            "bi"  '(ibuffer :wk "Ibuffer")
 (ht/leader-keys
  "." '(find-file :wk "Find file")
  "f c" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :wk "Edit emacs config")
  "TAB TAB" '(comment-line :wk "Comment lines"))



 (ht/leader-keys
  "h" '(:ignore t :wk "Help")
  "h f" '(describe-function :wk "Describe function")
  "h v" '(describe-variable :wk "Describe variable")
  ;;"h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config"))
  "h r r" '(reload-init-file :wk "Reload emacs config"))

 (ht/leader-keys
  "t" '(:ignore t :wk "Toggle")
  "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
  "t t" '(visual-line-mode :wk "Toggle truncated lines")
  "t e" '(term :wk "Terminal"))


 (ht/leader-keys
  "h" '(:ignore t :wk "Help")
  "h f" '(describe-function :wk "Describe function")
  "h v" '(describe-variable :wk "Describe variable")
  "h r r" '(reload-init-file :wk "Reload emacs config"))

 (ht/leader-keys
  "t" '(:ignore t :wk "Toggle")
  "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
  "t t" '(visual-line-mode :wk "Toggle truncated lines"))


)
#+END_SRC

* Transparency
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 90)) ; For all new frames henceforth

#+end_src
* Reload emacs
#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))

#+end_src

* Catppuccin Theme
The catppuccin theme for emacs
#+BEGIN_SRC emacs-lisp
(use-package catppuccin-theme)
  (load-theme 'catppuccin :no-confirm)
#+end_src

* Programming langs
#+begin_src emacs-lisp

#+end_src

* Org Mode Enhancements
Adding some enhancements for Org mode:

#+BEGIN_SRC emacs-lisp
  (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))

  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(electric-indent-mode -1)
(require `org-tempo)
#+END_SRC

* Ivy

#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :config (counsel-mode))

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))

#+end_src


* Which-Key Setup
Configuring which-key for displaying available keybindings:

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " >" ))
#+END_SRC

* Sudo Edit
Sudo edit gives you sudo perms when using emacs.

#+begin_src emacs-lisp

(use-package sudo-edit
  :config
    (ht/leader-keys
      "fu" '(sudo-edit-find-file :wk "Sudo find file")
      "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* Prevent save files
#+begin_src emacs-lisp
(setq make-backup-files nil)

#+end_src


* Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 35      ;; sets modeline height
        doom-modeline-bar-width 5    ;; sets right bar width
        doom-modeline-persp-name t   ;; adds perspective name to modeline
        doom-modeline-persp-icon t)) ;; adds folder icon next to persp name


#+end_src
